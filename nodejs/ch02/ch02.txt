NodeExample1에서 사용한 console.log() 는 console객체를 사용하였다. 여기서 console 객체는 전역 객체( Global Object ) 라고 부르며 필요할 때 코드의 어느 부분에서나 사용가능하다( 한마디로 따로 module( 파일 ) 을 추가할 필요가 없다)

대표적인 전역 객체로는
	console : 콘솔 창에 결과를 보여주는 객체
	process : 프로세스의 실행에 대한 정보를 다루는 객체
	exports : 모듈을 다루는 객체

undefined와 null의 차이 
	undefined : 단순히 값이 존재하지 않은 상태
	null : 의도적으로 값을 비운상태?


console객체의 속성( attribute : 변수나 메소드를 말한다. )
	dir( object ) : 객체의 속성들을 출력
	time( id ) : 실행시간을 측정하기 위한 시작 시간을 기록
	timeEnd( id ) : 실행 시간을 측정하기 위한 끝 시간을 기록

전역변수 ( global variable )
	__filename : 실행한 파일( .js파일 ) 의 절대 경로를 나타낸다.
	__dirname : 실행한 파일( .js파일 )이 위치한 디렉토리 경로를 나타낸다.

process객체의 속성
	argv : 프로세스를 실행할 떄 전달되는 매개변수 정보
		매개변수가 많을때는 배열 객체로 존재한다.
	env : 환경 변수 정보
		OS : 환경변수값 "OS"
	exit() : 프로세스를 끝내는 메소드



Node.js에서 모듈은 파일로 구분된다. 이러한 모듈을 사용하기 위해서는 CommonJs의 표준 스펙을 따라서 모듈을 사용할 수 있게한다. 이 표준 스펙이 exports 전역객체를 사용하도록 권고한다.
	ex) 	main.js ===> 	var module1 = require("module1");
				module1.함수이름();

		module1.js ===>	exports.함수이름 = 함수정의;


	모듈 파일에서 exports객체를 사용하여 exports 객체의 속성으로 변수나 함수를 지정하면 그 속성을 main.js와 같은 메인 모듈( main module )에서 불러와 사용할 수 있다. 불러올때는 require()메소드를 사용하며 객체를 반환한다. 이객체는 exports객체의 값을 그대로 갖고 있다.

	exports외에 module.exports를 사용할 수 있는데, 이러한 방법은 exports객체를 단일 객체로 인식하여 밖으로 내보내기 때문에 해당 객체의 속성값들을 자유롭게 사용가능하다. ( main 모듈에서 module1 모듈의 객체 속성값을 수정도 할 수 있다는 말!! )

외장 모듈을 사용하기!!
	nconf라는 시스템 환경변수를 볼수 있는 모듈이 있다.
	외장모듈을 사용하기 위해서는 해당 모듈의 package를 npm에서 받아와야한다.
	npm으로 받아오는 방법은 "npm install nconf"로 쉽게 받을 수 있다. 하지만 받는 위치에 신경을 써야한다!!
	현재 수해중인 폴더를 하나의 프로젝트로 봤을때 프로젝트에서만 사용하고 싶으면 해당 디렉토리에서 모듈을 다운받으면 된다. 하지만 모든 프로젝트에서 사용하고 싶으면 상위 디렉토리에서 다운을 받으면된다.
	다운을 받으면 node_module 이라는 디렉토리가 생성되고 그 안에 nconf라는 모듈 디렉토리가 생성된어 있는것을 확인 할 수 있다.
	또한 여러 PC에서 새롭게 구성한다고 했을때 해당 외장 모듈들을 항상 단운받는 번거로움이 있을 수 있다. 이것을 해결하는 방법으로는 npm에서 제공해주는 package.json이라는 파일을 이용하면 쉽게 해결이 된다.
	pachage.json을 사용하기 위해 초기 설정법
		1.초기화 ( node_module 디렉토리가 있는 경로에서 "npm init"을 수행한다."
		2. repository를 설정하고 싶으면 json에 아래와 깉이 추가한다.
			"repository": {
			  "type": "git",
			  "url": "git://github.com/username/repository.git"
			},
		2-2. 개인 스스로가 사용하고 싶다면 아래와 같이 추가한다.
			"private": true,
	package.json파일 안에는 프로젝트에 대한 기본 정보가 들어있다. 해당 파일에 등록을 하고 싶으면 npm으로 다운받을때 --save 라는 옵션을 추가한다.
	"npm install nconf --save" 이렇게 수행하면 package.json에 dependencies 라는 json 속성이 생기며 모듈 정보가 들어간 것을 확인할 수 있다. 
	이 파일을 새롭게 구성하려는 PC에 가지고가서 "npm install"이라는 명령어로 package.json 에 기록된 외장 모듈들을 그대로 다운받고 사용할 수 있게 된다.


내장 모듈을 사용해보자!!
	모듈 사용종류 3가지
		1. 만들어서 쓴다.
		2. 외장 패키지를 쓴다.
		3. 노드를 설치했을때 기본적으로 설치되어있는 내장 모듈을 사용한다. ( http://nodejs.org/api 참고 )
	대표적인 내장 모듈
		os : 시스템 정보를 알려주는 모듈 ( CPU, 메모리, 디스크 )
			hostname() : 운영체제의 호스트 이름
			totalmem() : 시스템의 전체 메모리 용량
			freemem() : 사용가능한 메모리 용량
			cpus() : CPU 정보
			networkInterfaces() : 네트워크 인터페이스 정보를 담은 배열 객체
		path : 파일 패스를 다루는 모듈 ( 파일 이름, 확장자, 등등.. )
			join() : 여러개의 이름들을 합쳐 자동으로 파일패스를 생성
			dirname() : 디렉토리 이름을 반환
			basename() : 파일의 확장자를 제외한 이름 반환
			extname() : 파일의 확장자를 반환
	
	내장 모듈을 require()로 얻어올때 path를 확인하여 파일을 확인하고, 파일이 존재하지 않을 경우 디렉토리 내부의 index.js를 확인한다. 
	js에서 라이브러리를 만들때 index.js에 mapping하여 디렉토리 내부의 모듈들을 라이브러리화 시킬수 있다.
	이런식으로 라이브러리를 만들어야 프로젝트의 모델화를 하기 수월하고 관리에 용이함도 올라갈것이다.
	
	
